    private lateinit var timeDB: TimeDB
    private lateinit var timeDao: PrayerTimesDao
    bindView()

 private fun bindView() {
        GlobalScope.launch {
            timeDB = TimeDB.getDatabase(requireContext())
            timeDao = timeDB.prayerTimesDao()
            val prayerTimes = timeDao.getAllPrayerTimes()

            val timeFormat24 = SimpleDateFormat("HH:mm", Locale.getDefault())
            val timeFormat12 = SimpleDateFormat("hh:mm a", Locale.getDefault())

            binding.tvFajarTimeStart.text = convertTimeTo12HourFormat(prayerTimes[0].endTime, timeFormat24, timeFormat12)
            binding.tvFajarTimeEnd.text = convertTimeTo12HourFormat(prayerTimes[0].startTime, timeFormat24, timeFormat12)
            binding.tvZuhrTimeStart.text = convertTimeTo12HourFormat(prayerTimes[1].endTime, timeFormat24, timeFormat12)
            binding.tvZuhrTimeEnd.text = convertTimeTo12HourFormat(prayerTimes[1].startTime, timeFormat24, timeFormat12)
            binding.tvAsrTimeStart.text = convertTimeTo12HourFormat(prayerTimes[2].endTime, timeFormat24, timeFormat12)
            binding.tvAsrTimeEnd.text = convertTimeTo12HourFormat(prayerTimes[2].startTime, timeFormat24, timeFormat12)
            binding.tvMaghribTimeStart.text = convertTimeTo12HourFormat(prayerTimes[3].endTime, timeFormat24, timeFormat12)
            binding.tvMaghribTimeEnd.text = convertTimeTo12HourFormat(prayerTimes[3].startTime, timeFormat24, timeFormat12)
            binding.tvIshaTimeStart.text = convertTimeTo12HourFormat(prayerTimes[4].endTime, timeFormat24, timeFormat12)
            binding.tvIshaTimeEnd.text = convertTimeTo12HourFormat(prayerTimes[4].startTime, timeFormat24, timeFormat12)

        }
    }
    private fun convertTimeTo12HourFormat(time: String, inputFormat: SimpleDateFormat, outputFormat: SimpleDateFormat): String {
        val date = inputFormat.parse(time)
        return outputFormat.format(date)
    }





////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

class PrayerModeReceiver: BroadcastReceiver(){
    override fun onReceive(context: Context, intent: Intent) {
        Log.d("PrayerModeReceiver", "broadcast Received ")
        val audioManager = context.getSystemService(Context.AUDIO_SERVICE) as AudioManager
        when(intent.action){
            "com.example.autosilentapp.ACTION_PRAYER_SILENT_MODE" ->{
                audioManager.ringerMode = AudioManager.RINGER_MODE_VIBRATE
            }
            "com.example.autosilentapp.ACTION_PRAYER_RING_MODE" ->{
                audioManager.ringerMode = AudioManager.RINGER_MODE_NORMAL
            }
        }
    }
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

        getPrayerTimes()
 ////////////////////////// sitting Alarm for Prayer //////////////////////////

    private fun getPrayerTimes() {
        val sharedPreferences =
            requireContext().getSharedPreferences("AppPreferences", Context.MODE_PRIVATE)
        val isPrayerTimesLoaded = sharedPreferences.getBoolean("isPrayerTimesLoaded", false)
        if (!isPrayerTimesLoaded) {
            val timeDao = database.prayerTimesDao()
            lifecycleScope.launch {
                val prayerTimes: List<PrayerTimesEntity> = timeDao.getAllPrayerTimes()
                setAlarmForPrayerTimes(prayerTimes)
                sharedPreferences.edit().putBoolean("isPrayerTimesLoaded", true).apply()
            }
        }
    }

    private fun setAlarmForPrayerTimes(prayerTimes: List<PrayerTimesEntity>) {
        for (prayerTime in prayerTimes) {
            Log.d("prayerTime", "in for loop time ----- $prayerTime")

            // Set alarm for prayer start time
            val timeStartParts = prayerTime.startTime.split(":")
            Log.d("prayerTime", "start time split ----- $timeStartParts")

            val startTimeHour = timeStartParts[0].toInt()
            val startTimeMin = timeStartParts[1].toInt()
            scheduleSilentModeAlarm(startTimeHour, startTimeMin)

            // Set alarm for prayer end time
            val timeEndParts = prayerTime.endTime.split(":")
            Log.d("prayerTime", "end time split ----- $timeEndParts")

            val endTimeHour = timeEndParts[0].toInt()
            val endTimeMin = timeEndParts[1].toInt()
            scheduleRingModeAlarm(endTimeHour, endTimeMin)
        }
    }

    private fun scheduleSilentModeAlarm(hour: Int, minute: Int) {
        val context = requireContext()
        val alarmManager = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager
        // Create a unique request code for the PendingIntent
        val requestCode = (hour * 100) + minute

        // Create an intent for the broadcast receiver
        val intent = Intent(context, PrayerModeReceiver::class.java).apply {
            action = "com.example.autosilentapp.ACTION_PRAYER_SILENT_MODE"
        }
        val pendingIntent = PendingIntent.getBroadcast(
            context,
            requestCode,
            intent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        // Create a calendar object and set the alarm time
        val calendar = Calendar.getInstance().apply {
            timeInMillis = System.currentTimeMillis()
            set(Calendar.HOUR_OF_DAY, hour)
            set(Calendar.MINUTE, minute)
            set(Calendar.SECOND, 0)
        }

        // Check if the alarm time is in the past, if so, add a day to the calendar
        val currentTime = System.currentTimeMillis()
        if (calendar.timeInMillis < currentTime) {
            calendar.add(Calendar.DAY_OF_YEAR, 1)
        }
        Log.d("prayerTime", "start calender time Milli ----- ${calendar.timeInMillis}")

        // Set the alarm using the AlarmManager
        alarmManager.setRepeating(
            AlarmManager.RTC_WAKEUP, calendar.timeInMillis, AlarmManager.INTERVAL_DAY, pendingIntent
        )
    }

    private fun scheduleRingModeAlarm(hour: Int, minute: Int) {
        val context = requireContext()
        val alarmManager = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager
        // Create a unique request code for the PendingIntent
        val requestCode = (hour * 100) + minute

        val ringModeIntent = Intent(context, PrayerModeReceiver::class.java).apply {
            action = "com.example.autosilentapp.ACTION_PRAYER_RING_MODE"
        }
        val pendingIntent = PendingIntent.getBroadcast(
            context,
            requestCode,
            ringModeIntent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        // Create a calendar object and set the alarm time
        val calendar = Calendar.getInstance().apply {
            timeInMillis = System.currentTimeMillis()
            set(Calendar.HOUR_OF_DAY, hour)
            set(Calendar.MINUTE, minute)
            set(Calendar.SECOND, 0)
        }

        // Check if the alarm time is in the past, if so, add a day to the calendar
        val currentTime = System.currentTimeMillis()
        if (calendar.timeInMillis < currentTime) {
            calendar.add(Calendar.DAY_OF_YEAR, 1)
        }
        Log.d("prayerTime", "end calender time Milli ----- ${calendar.timeInMillis}")

        alarmManager.setRepeating(
            AlarmManager.RTC_WAKEUP, calendar.timeInMillis, AlarmManager.INTERVAL_DAY, pendingIntent
        )
    }

////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private lateinit var timeDB: TimeDB
    private lateinit var timeDao: PrayerTimesDao

    timeDB = TimeDB.getDatabase(applicationContext)
        timeDao = timeDB.prayerTimesDao()
        GlobalScope.launch {
            timeDao.insertPrayerTimes(PrayerTimesEntity(PrayerName = "fajar", startTime = "4:15", endTime = "4:40"))
            timeDao.insertPrayerTimes(PrayerTimesEntity(PrayerName = "zuhr", startTime = "13:15", endTime = "13:40"))
            timeDao.insertPrayerTimes(PrayerTimesEntity(PrayerName = "asr", startTime = "17:45", endTime = "18:10"))
            timeDao.insertPrayerTimes(PrayerTimesEntity(PrayerName = "maghrib", startTime = "19:15", endTime = "19:45"))
            timeDao.insertPrayerTimes(PrayerTimesEntity(PrayerName = "isha", startTime = "21:00", endTime = "21:30"))
        }
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////


     ,PrayerTimesEntity::class
     abstract fun prayerTimesDao(): PrayerTimesDao


@Entity(tableName = "prayer_times")
data class PrayerTimesEntity(
    @PrimaryKey(autoGenerate = true) val id: Int = 0,
    @ColumnInfo(name = "prayerName" ) val PrayerName: String,
    @ColumnInfo(name = "startTime" ) val startTime: String,
    @ColumnInfo(name = "endTIme" ) val endTime: String,
)

@Dao
interface PrayerTimesDao {
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertPrayerTimes(prayerTimes: PrayerTimesEntity)

    @Query("SELECT * FROM prayer_times")
    suspend fun getAllPrayerTimes(): List<PrayerTimesEntity>
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////